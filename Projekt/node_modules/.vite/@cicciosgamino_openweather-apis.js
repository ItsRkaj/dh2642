import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-UFEQV7DM.js";

// node_modules/@cicciosgamino/openweather-apis/index.js
var fetch;
var nodeFetch;
var Headers;
var Request;
var _language, _countryCode, _city, _cityId, _zipCode, _apiKey, _host, _path, _format, _units, _coordinates, _handleProFetch, handleProFetch_fn, _handleFetch, handleFetch_fn;
var AsyncWeather = class {
  constructor() {
    __privateAdd(this, _handleProFetch);
    __privateAdd(this, _handleFetch);
    __privateAdd(this, _language, "");
    __privateAdd(this, _countryCode, "");
    __privateAdd(this, _city, "");
    __privateAdd(this, _cityId, "");
    __privateAdd(this, _zipCode, "");
    __privateAdd(this, _apiKey, "");
    __privateAdd(this, _host, "https://api.openweathermap.org");
    __privateAdd(this, _path, "/data/2.5/weather?");
    __privateAdd(this, _format, "json");
    __privateAdd(this, _units, "metric");
    __privateAdd(this, _coordinates, {
      latitude: "",
      longitude: ""
    });
    return (async () => {
      await this.initFetch();
      return this;
    })();
  }
  async initFetch() {
    const isBrowser = new Function("try {return this===window}catch(e){ return false}");
    const isNode = new Function("try {return this===global}catch(e){return false}");
    if (isBrowser()) {
      fetch = window.fetch;
      Headers = window.Headers;
      Request = window.Request;
    }
    if (isNode()) {
      nodeFetch = await import("./lib-FN7MBJ6T.js");
      fetch = nodeFetch.default;
      Headers = nodeFetch.Headers;
      Request = nodeFetch.Request;
    }
  }
  setLang(language) {
    __privateSet(this, _language, String(language));
  }
  getLang() {
    return __privateGet(this, _language);
  }
  setCity(city) {
    __privateSet(this, _city, encodeURIComponent(String(city).toLowerCase()));
  }
  getCity() {
    return __privateGet(this, _city);
  }
  setCoordinates(latitude, longitude) {
    __privateSet(this, _coordinates, {
      latitude: String(latitude),
      longitude: String(longitude)
    });
  }
  getCoordinates() {
    return __privateGet(this, _coordinates);
  }
  setCityId(cityId) {
    __privateSet(this, _cityId, String(cityId));
  }
  getCityId() {
    return __privateGet(this, _cityId);
  }
  setZipCodeAndCountryCode(zipCode, countryCode) {
    __privateSet(this, _zipCode, String(zipCode));
    const iso3166 = [
      "AD",
      "AE",
      "AF",
      "AG",
      "AI",
      "AL",
      "AM",
      "AO",
      "AQ",
      "AR",
      "AS",
      "AT",
      "AU",
      "AW",
      "AX",
      "AZ",
      "BA",
      "BB",
      "BD",
      "BE",
      "BF",
      "BG",
      "BH",
      "BI",
      "BJ",
      "BL",
      "BM",
      "BN",
      "BO",
      "BQ",
      "BR",
      "BS",
      "BT",
      "BV",
      "BW",
      "BY",
      "BZ",
      "CA",
      "CC",
      "CD",
      "CF",
      "CG",
      "CH",
      "CI",
      "CK",
      "CL",
      "CM",
      "CN",
      "CO",
      "CR",
      "CU",
      "CV",
      "CW",
      "CX",
      "CY",
      "CZ",
      "DE",
      "DJ",
      "DK",
      "DM",
      "DO",
      "DZ",
      "EC",
      "EE",
      "EG",
      "EH",
      "ER",
      "ES",
      "ET",
      "FI",
      "FJ",
      "FK",
      "FM",
      "FO",
      "FR",
      "GA",
      "GB",
      "GD",
      "GE",
      "GF",
      "GG",
      "GH",
      "GI",
      "GL",
      "GM",
      "GN",
      "GP",
      "GQ",
      "GR",
      "GS",
      "GT",
      "GU",
      "GW",
      "GY",
      "HK",
      "HM",
      "HN",
      "HR",
      "HT",
      "HU",
      "ID",
      "IE",
      "IL",
      "IM",
      "IN",
      "IO",
      "IQ",
      "IR",
      "IS",
      "IT",
      "JE",
      "JM",
      "JO",
      "JP",
      "KE",
      "KG",
      "KH",
      "KI",
      "KM",
      "KN",
      "KP",
      "KR",
      "KW",
      "KY",
      "KZ",
      "LA",
      "LB",
      "LC",
      "LI",
      "LK",
      "LR",
      "LS",
      "LT",
      "LU",
      "LV",
      "LY",
      "MA",
      "MC",
      "MD",
      "ME",
      "MF",
      "MG",
      "MH",
      "MK",
      "ML",
      "MM",
      "MN",
      "MO",
      "MP",
      "MQ",
      "MR",
      "MS",
      "MT",
      "MU",
      "MV",
      "MW",
      "MX",
      "MY",
      "MZ",
      "NA",
      "NC",
      "NE",
      "NF",
      "NG",
      "NI",
      "NL",
      "NO",
      "NP",
      "NR",
      "NU",
      "NZ",
      "OM",
      "PA",
      "PE",
      "PF",
      "PG",
      "PH",
      "PK",
      "PL",
      "PM",
      "PN",
      "PR",
      "PS",
      "PT",
      "PW",
      "PY",
      "QA",
      "RE",
      "RO",
      "RS",
      "RU",
      "RW",
      "SA",
      "SB",
      "SC",
      "SD",
      "SE",
      "SG",
      "SH",
      "SI",
      "SJ",
      "SK",
      "SL",
      "SM",
      "SN",
      "SO",
      "SR",
      "SS",
      "ST",
      "SV",
      "SX",
      "SY",
      "SZ",
      "TC",
      "TD",
      "TF",
      "TG",
      "TH",
      "TJ",
      "TK",
      "TL",
      "TM",
      "TN",
      "TO",
      "TR",
      "TT",
      "TV",
      "TW",
      "TZ",
      "UA",
      "UG",
      "UM",
      "US",
      "UY",
      "UZ",
      "VA",
      "VC",
      "VE",
      "VG",
      "VI",
      "VN",
      "VU",
      "WF",
      "WS",
      "YE",
      "YT",
      "ZA",
      "ZM",
      "ZW"
    ];
    if (iso3166.includes(countryCode.toUpperCase())) {
      __privateSet(this, _countryCode, countryCode.toUpperCase());
    } else {
      throw new Error("Country code not valid! Enter a valid contry code!");
    }
  }
  getZipCodeAndCountryCode() {
    return {
      zipCode: __privateGet(this, _zipCode),
      countryCode: __privateGet(this, _countryCode)
    };
  }
  setUnits(units) {
    __privateSet(this, _units, String(units).toLocaleLowerCase());
  }
  getUnits() {
    return __privateGet(this, _units);
  }
  setApiKey(apiKey) {
    __privateSet(this, _apiKey, apiKey);
  }
  getApiKey() {
    return __privateGet(this, _apiKey);
  }
  getTemperature() {
    const p = new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          if (data.main.temp && typeof data.main.temp === "number") {
            resolve(data.main.temp);
          } else {
            reject(new Error("Temperature data NOT found or in bad format."));
          }
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
    return p;
  }
  getPressure() {
    const p = new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          if (data.main.pressure && typeof data.main.pressure === "number") {
            resolve(data.main.pressure);
          } else {
            reject(new Error("Pressure data NOT found or in bad format."));
          }
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
    return p;
  }
  getHumidity() {
    const p = new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          if (data.main.humidity && typeof data.main.humidity === "number") {
            resolve(data.main.humidity);
          } else {
            reject(new Error("Humidity data NOT found or in bad format."));
          }
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
    return p;
  }
  getTitle() {
    const p = new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          if (data.weather[0].main && typeof data.weather[0].main === "string") {
            resolve(data.weather[0].main);
          } else {
            reject(new Error("Weather Info NOT found or in bad format."));
          }
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
    return p;
  }
  getDescription() {
    const p = new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          if (data.weather[0].description && typeof data.weather[0].description === "string") {
            resolve(data.weather[0].description);
          } else {
            reject(new Error("Weather Description NOT found or in bad format."));
          }
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
    return p;
  }
  getAllWeather() {
    return new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          resolve(data);
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
  }
  getForecast4Days(cnt) {
    return new Promise((resolve, reject) => {
      __privateMethod(this, _handleProFetch, handleProFetch_fn).call(this, cnt).then((data) => {
        if (data.cod > 199 && data.cod < 400) {
          resolve(data);
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
  }
  getSmartJSON() {
    const p = new Promise((resolve, reject) => {
      __privateMethod(this, _handleFetch, handleFetch_fn).call(this).then((data) => {
        var _a, _b, _c, _d, _e;
        if (data.cod > 199 && data.cod < 400) {
          resolve({
            temp: (_a = data == null ? void 0 : data.main) == null ? void 0 : _a.temp,
            humidity: (_b = data == null ? void 0 : data.main) == null ? void 0 : _b.humidity,
            pressure: (_c = data == null ? void 0 : data.main) == null ? void 0 : _c.pressure,
            description: (_d = data.weather[0]) == null ? void 0 : _d.description,
            weathercode: (_e = data.weather[0]) == null ? void 0 : _e.id,
            rain: data == null ? void 0 : data.precipitation
          });
        } else {
          reject(new Error(`Response Code ${data.cod} >> ${data.message}`));
        }
      }).catch((err) => {
        reject(err);
      });
    });
    return p;
  }
  getError() {
    const p = new Promise((resolve, reject) => {
      reject("FAKE@ERROR");
    });
    return p;
  }
};
_language = new WeakMap();
_countryCode = new WeakMap();
_city = new WeakMap();
_cityId = new WeakMap();
_zipCode = new WeakMap();
_apiKey = new WeakMap();
_host = new WeakMap();
_path = new WeakMap();
_format = new WeakMap();
_units = new WeakMap();
_coordinates = new WeakMap();
_handleProFetch = new WeakSet();
handleProFetch_fn = function(cnt) {
  const host = "https://pro.openweathermap.org";
  const path = "/data/2.5/forecast/hourly?";
  const searchParams = new URLSearchParams("");
  if (__privateGet(this, _coordinates).latitude !== "" && __privateGet(this, _coordinates).longitude !== "") {
    searchParams.append("lat", __privateGet(this, _coordinates).latitude);
    searchParams.append("lon", __privateGet(this, _coordinates).longitude);
  } else if (__privateGet(this, _zipCode) !== "") {
    searchParams.append("zip", `${__privateGet(this, _zipCode)},${__privateGet(this, _countryCode)}`);
  } else if (__privateGet(this, _cityId) !== "") {
    searchParams.append("id", __privateGet(this, _cityId));
  } else if (__privateGet(this, _city) !== "") {
    searchParams.append("q", __privateGet(this, _city));
  }
  searchParams.append("units", __privateGet(this, _units));
  searchParams.append("lang", __privateGet(this, _language));
  searchParams.append("mode", __privateGet(this, _format));
  if (isNaN(cnt) || cnt < 1 || cnt > 97) {
    cnt = 1;
  }
  searchParams.append("cnt", cnt);
  searchParams.append("APPID", __privateGet(this, _apiKey));
  const requestURL = host + path + searchParams.toString();
  const headers = new Headers();
  const request = new Request(requestURL, {
    method: "GET",
    headers,
    mode: "cors",
    cache: "default"
  });
  if (__privateGet(this, _city) !== "" || __privateGet(this, _cityId) !== "" || __privateGet(this, _zipCode) !== "" && __privateGet(this, _countryCode) || __privateGet(this, _coordinates).latitude !== "" && __privateGet(this, _coordinates).longitude !== "") {
    return fetch(request).then((response) => response.json());
  } else {
    return Promise.reject(new Error("No Location set! Use setCity, setCityId, setCoordinates or setZipCode before request data."));
  }
};
_handleFetch = new WeakSet();
handleFetch_fn = function() {
  const hostPath = `${__privateGet(this, _host) + __privateGet(this, _path)}`;
  const searchParams = new URLSearchParams("");
  if (__privateGet(this, _coordinates).latitude !== "" && __privateGet(this, _coordinates).longitude !== "") {
    searchParams.append("lat", __privateGet(this, _coordinates).latitude);
    searchParams.append("lon", __privateGet(this, _coordinates).longitude);
  } else if (__privateGet(this, _zipCode) !== "") {
    searchParams.append("zip", `${__privateGet(this, _zipCode)},${__privateGet(this, _countryCode)}`);
  } else if (__privateGet(this, _cityId) !== "") {
    searchParams.append("id", __privateGet(this, _cityId));
  } else if (__privateGet(this, _city) !== "") {
    searchParams.append("q", __privateGet(this, _city));
  }
  searchParams.append("units", __privateGet(this, _units));
  searchParams.append("lang", __privateGet(this, _language));
  searchParams.append("mode", __privateGet(this, _format));
  searchParams.append("APPID", __privateGet(this, _apiKey));
  const requestURL = hostPath + searchParams.toString();
  const headers = new Headers();
  const request = new Request(requestURL, {
    method: "GET",
    headers,
    mode: "cors",
    cache: "default"
  });
  if (__privateGet(this, _city) !== "" || __privateGet(this, _cityId) !== "" || __privateGet(this, _zipCode) !== "" && __privateGet(this, _countryCode) || __privateGet(this, _coordinates).latitude !== "" && __privateGet(this, _coordinates).longitude !== "") {
    return fetch(request).then((response) => response.json());
  } else {
    return Promise.reject(new Error("No Location set! Use setCity, setCityId, setCoordinates or setZipCode before request data."));
  }
};
export {
  AsyncWeather
};
//# sourceMappingURL=@cicciosgamino_openweather-apis.js.map
