{
  "version": 3,
  "sources": ["../@cicciosgamino/openweather-apis/index.js"],
  "sourcesContent": ["let fetch, nodeFetch, Headers, Request\n\nexport class AsyncWeather {\n  #language = ''\n  #countryCode = ''\n  #city = ''\n  #cityId = ''\n  #zipCode = ''\n  #apiKey= ''\n  #host = 'https://api.openweathermap.org'\n  #path = '/data/2.5/weather?'\n  #format = 'json'\n  #units = 'metric'\n  #coordinates = {\n    latitude: '',\n    longitude: ''\n  }\n\n  constructor () {\n    return (async () => {\n      // init the instance for node.js or browsers\n      await this.initFetch()\n      return this\n    })()\n  }\n\n  /**\n   * Init the fetch native in browsers or with node-fetch in Node.js\n   */\n  async initFetch () {\n    const isBrowser = new Function('try {return this===window}catch(e){ return false}')\n    const isNode = new Function('try {return this===global}catch(e){return false}')\n\n    if (isBrowser()) {\n      fetch = window.fetch\n      Headers = window.Headers\n      Request = window.Request\n    }\n    if (isNode()) {\n      // import and use node-fetch\n      nodeFetch = await import('node-fetch')\n      fetch = nodeFetch.default\n      Headers = nodeFetch.Headers\n      Request = nodeFetch.Request\n    }\n  }\n\n  /**\n   * Setter for the language\n   *\n   * @param {String} language - String language to set\n   */\n  setLang (language) {\n    this.#language = String(language)\n  }\n\n  /**\n   * Getter for the language\n   *\n   * @returns {String} - language string\n   */\n  getLang () {\n    return this.#language\n  }\n\n  /**\n   * Setter for the city\n   *\n   * @param {String} city - String city to set\n   */\n  setCity (city) {\n    this.#city = encodeURIComponent(String(city).toLowerCase())\n  }\n\n  /**\n   * Getter for the city\n   *\n   * @returns {String} - city string\n   */\n  getCity () {\n    return this.#city\n  }\n\n  /**\n   * Setter for coordinates as latitude & longitude\n   *\n   * @param {String} latitude - String latitude to set\n   * @param {String} longitude - String longitude to set\n   */\n  setCoordinates (latitude, longitude) {\n    this.#coordinates = {\n      latitude: String(latitude),\n      longitude: String(longitude)\n    }\n  }\n\n  /**\n   * Getter for the coordinates\n   *\n   * @returns {Object} - coordinates {latitude: '', longitude: ''}\n   */\n  getCoordinates () {\n    return this.#coordinates\n  }\n\n  /**\n   * Setter for the cityId\n   *\n   * @param {String} cityId - String cityId to set\n   */\n  setCityId (cityId) {\n    this.#cityId = String(cityId)\n  }\n\n  /**\n   * Getter for the cityId\n   *\n   * @returns {String} - cityId string\n   */\n  getCityId () {\n    return this.#cityId\n  }\n\n  /**\n   * Setter for the zipCode\n   *\n   * @param {String} zipCode - String zipCode to set\n   */\n  setZipCodeAndCountryCode (zipCode, countryCode) {\n    this.#zipCode = String(zipCode)\n\n    // iso3166 Country code\n    const iso3166 = ['AD', 'AE', 'AF', 'AG', 'AI','AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ',\n                     'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ',\n                     'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ',\n                     'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ',\n                     'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', \n                     'FI', 'FJ', 'FK', 'FM', 'FO', 'FR',\n                     'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY',\n                     'HK', 'HM', 'HN', 'HR', 'HT', 'HU',\n                     'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', \n                     'JE', 'JM', 'JO', 'JP',\n                     'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ',\n                     'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY',\n                     'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ',\n                     'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ',\n                     'OM',\n                     'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY',\n                     'QA',\n                     'RE', 'RO', 'RS', 'RU', 'RW',\n                     'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ',\n                     'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ',\n                     'UA', 'UG', 'UM', 'US', 'UY', 'UZ',\n                     'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', \n                     'WF', 'WS',\n                     'YE', 'YT',\n                     'ZA', 'ZM', 'ZW']\n\n    if (iso3166.includes(countryCode.toUpperCase())) {\n      this.#countryCode = countryCode.toUpperCase()\n    } else {\n      throw new Error('Country code not valid! Enter a valid contry code!')\n    }\n  }\n\n  /**\n   * Getter for the zipCode\n   *\n   * @returns {Object} - { zipCode: '', countryCode: '' }\n   */\n   getZipCodeAndCountryCode () {\n    return {\n      zipCode: this.#zipCode,\n      countryCode: this.#countryCode\n    }\n  }\n\n  /**\n   * Setter for the measure units\n   *\n   * @param {String} units - String units to set\n   */\n  setUnits (units) {\n    this.#units = String(units).toLocaleLowerCase()\n  }\n\n  /**\n   * Getter for the measure units\n   *\n   * @returns {String} - units string\n   */\n  getUnits () {\n    return this.#units\n  }\n\n  /**\n   * Setter for the apiKey\n   *\n   * @param {String} apiKey - String apiKey to set\n   */\n  setApiKey (apiKey) {\n    this.#apiKey = apiKey\n  }\n\n  /**\n   * Getter for the apiKey\n   *\n   * @returns {String} - apiKey string\n   */\n  getApiKey () {\n    return this.#apiKey\n  }\n\n  /**\n   * Function to request the temperature for the location set\n   *\n   * @returns {Promise<Number>} - Promise that resolve Temperature as Number\n   */\n  getTemperature () {\n    const p = new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            if (data.main.temp && typeof data.main.temp === 'number') {\n              resolve(data.main.temp)\n            } else {\n              reject(new Error('Temperature data NOT found or in bad format.'))\n            }\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n    return p\n  }\n\n  /**\n   * Function to request the pressure for the location set\n   *\n   * @returns {Promise<Number>} - Promise that resolve Temperature as Number\n   */\n  getPressure () {\n    const p = new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            if (data.main.pressure && typeof data.main.pressure === 'number') {\n              resolve(data.main.pressure)\n            } else {\n              reject(new Error('Pressure data NOT found or in bad format.'))\n            }\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n    return p\n  }\n\n  /**\n   * Function to request the humidity for the location set\n   *\n   * @returns {Promise<Number>} - Promise that resolve Humidity as Number %\n   */\n   getHumidity () {\n    const p = new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            if (data.main.humidity && typeof data.main.humidity === 'number') {\n              resolve(data.main.humidity)\n            } else {\n              reject(new Error('Humidity data NOT found or in bad format.'))\n            }\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n    return p\n   }\n\n   /**\n   * Function to request the Weather Title eg. Sun, Couds etc\n   *\n   * @returns {Promise<String>} - Promise that resolve Weather title as string\n   */\n   getTitle () {\n    const p = new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            if (data.weather[0].main && typeof data.weather[0].main === 'string') {\n              resolve(data.weather[0].main)\n            } else {\n              reject(new Error('Weather Info NOT found or in bad format.'))\n            }\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n    return p\n   }\n\n  /**\n   * Function to request the Weather Description based on weather and language eg. Nubi Sparse\n   *\n   * @returns {Promise<String>} - Promise that resolve Humidity as Number %\n   */\n  getDescription () {\n    const p = new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            if (data.weather[0].description && \n                  typeof data.weather[0].description === 'string'\n              ) {\n              resolve(data.weather[0].description)\n            } else {\n              reject(new Error('Weather Description NOT found or in bad format.'))\n            }\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n    return p\n  }\n\n  \n  /**\n   * Fetch + JSON promise wrapper around the openweather endpoin request\n   *\n   * @returns {Promise<JSON>} - Promise that resolve in JSON meteo data\n   */\n  getAllWeather () {\n    return new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            resolve(data)\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n\n  /**\n   * Get the hourly forecast for 4 days MAX\n   * https://openweathermap.org/api/hourly-forecast\n   * @returns Promise(data, error)\n   */\n  getForecast4Days (cnt) {\n    return new Promise((resolve, reject) => {\n      this.#handleProFetch(cnt)\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            resolve(data)\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n        })\n        .catch(err => {\n          reject(err)\n        })\n      })\n  }\n\n  /**\n   * Compact JSON object (SMART) with main Weather data\n   * @returns {Promise<JSON>} - Promise that resolve in Smart Weather JSON data\n   */\n  getSmartJSON () {\n    const p = new Promise((resolve, reject) => {\n      this.#handleFetch()\n        .then(data => {\n          // check if is a 20x / 30x response\n          if (data.cod > 199 && data.cod < 400) {\n            resolve({\n              temp: data?.main?.temp,\n              humidity: data?.main?.humidity,\n              pressure: data?.main?.pressure,\n              description: data.weather[0]?.description,\n              weathercode: data.weather[0]?.id,\n              rain: data?.precipitation\n            })\n          } else {\n            // handle response.cod out of ok range\n            reject(new Error(`Response Code ${data.cod} >> ${data.message}`))\n          }\n\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n    return p\n  }\n\n  /**\n   * \n   * Moke a fake request that raise error\n   */\n   getError () {\n     const p = new Promise((resolve, reject) => {\n       reject('FAKE@ERROR')\n     })\n     return p\n   }\n\n     /**\n   * Wrapper around the fetch to open-weather pro endpoint, here \n   * where the URL is build\n   *\n   */\n  #handleProFetch(cnt) {\n\n    // compose the path for the forecast request\n    const host = 'https://pro.openweathermap.org'\n    const path = '/data/2.5/forecast/hourly?'\n    const searchParams = new URLSearchParams('')\n    // handle the priority to set the place (coordinates, zip + state, cityId, city)\n    if (this.#coordinates.latitude !== '' && this.#coordinates.longitude !== '') {\n      searchParams.append('lat', this.#coordinates.latitude)\n      searchParams.append('lon', this.#coordinates.longitude)\n    } else if (this.#zipCode !== '') {\n      searchParams.append('zip', `${this.#zipCode},${this.#countryCode}`)\n    } else if (this.#cityId !== '') {\n      searchParams.append('id', this.#cityId)\n    } else if (this.#city !== '') {\n      searchParams.append('q', this.#city)\n    }\n\n    searchParams.append('units', this.#units)\n    searchParams.append('lang', this.#language)\n    searchParams.append('mode', this.#format)\n    // cnt number of timestamps in response (hours 1 - 96)\n    if (isNaN(cnt) || cnt < 1 || cnt > 97) {\n      cnt = 1\n    }\n    searchParams.append('cnt', cnt)\n    searchParams.append('APPID', this.#apiKey)\n\n    const requestURL = host + path + searchParams.toString()\n\n    // set the headers and the HTTP request\n    const headers = new Headers()\n    const request = new Request(\n      requestURL,\n      {\n        method: 'GET',\n        headers,\n        mode: 'cors',\n        cache: 'default'\n      })\n\n    // Check if location set\n    if (\n      this.#city !== '' || \n      this.#cityId !== '' || \n      (this.#zipCode !== '' && this.#countryCode) || \n      (this.#coordinates.latitude !== '' && this.#coordinates.longitude !== '')\n      ) {\n        \n        // make the fetch request\n        return fetch(request)\n          .then(response => response.json())\n      } else {\n        // reject promise\n        return Promise.reject(\n          new Error('No Location set! Use setCity, setCityId, setCoordinates or setZipCode before request data.')\n        )\n      }\n\n  }\n\n  /**\n   * Wrapper around the fetch to open-weather endpoint, here the URL is build\n   *\n   */\n  #handleFetch () {\n    const hostPath = `${this.#host + this.#path}`\n    const searchParams = new URLSearchParams('')\n    // handle the priority to set the place (coordinates, zip + state, cityId, city)\n    if (this.#coordinates.latitude !== '' && this.#coordinates.longitude !== '') {\n      searchParams.append('lat', this.#coordinates.latitude)\n      searchParams.append('lon', this.#coordinates.longitude)\n    } else if (this.#zipCode !== '') {\n      searchParams.append('zip', `${this.#zipCode},${this.#countryCode}`)\n    } else if (this.#cityId !== '') {\n      searchParams.append('id', this.#cityId)\n    } else if (this.#city !== '') {\n      searchParams.append('q', this.#city)\n    }\n\n    searchParams.append('units', this.#units)\n    searchParams.append('lang', this.#language)\n    searchParams.append('mode', this.#format)\n    searchParams.append('APPID', this.#apiKey)\n\n    const requestURL = hostPath + searchParams.toString()\n\n    // set the headers and the HTTP request\n    const headers = new Headers()\n    const request = new Request(\n      requestURL,\n      {\n        method: 'GET',\n        headers,\n        mode: 'cors',\n        cache: 'default'\n      })\n\n    // Check if the location set\n    if (\n      this.#city !== '' || \n      this.#cityId !== '' || \n      (this.#zipCode !== '' && this.#countryCode) || \n      (this.#coordinates.latitude !== '' && this.#coordinates.longitude !== '')\n      ) {\n        \n        // make the fetch request\n        return fetch(request)\n          .then(response => response.json())\n      } else {\n        // reject promise\n        return Promise.reject(\n          new Error('No Location set! Use setCity, setCityId, setCoordinates or setZipCode before request data.')\n        )\n      }\n\n    \n  }\n}\n"],
  "mappings": ";;;;;;;;AAAA,IAAI;AAAJ,IAAW;AAAX,IAAsB;AAAtB,IAA+B;AAA/B;AAEO,yBAAmB;AAAA,EAgBxB,cAAe;AA+af;AAiEA;AA/fA,kCAAY;AACZ,qCAAe;AACf,8BAAQ;AACR,gCAAU;AACV,iCAAW;AACX,gCAAS;AACT,8BAAQ;AACR,8BAAQ;AACR,gCAAU;AACV,+BAAS;AACT,qCAAe;AAAA,MACb,UAAU;AAAA,MACV,WAAW;AAAA;AAIX,WAAQ,aAAY;AAElB,YAAM,KAAK;AACX,aAAO;AAAA;AAAA;AAAA,QAOL,YAAa;AACjB,UAAM,YAAY,IAAI,SAAS;AAC/B,UAAM,SAAS,IAAI,SAAS;AAE5B,QAAI,aAAa;AACf,cAAQ,OAAO;AACf,gBAAU,OAAO;AACjB,gBAAU,OAAO;AAAA;AAEnB,QAAI,UAAU;AAEZ,kBAAY,MAAM,OAAO;AACzB,cAAQ,UAAU;AAClB,gBAAU,UAAU;AACpB,gBAAU,UAAU;AAAA;AAAA;AAAA,EASxB,QAAS,UAAU;AACjB,uBAAK,WAAY,OAAO;AAAA;AAAA,EAQ1B,UAAW;AACT,WAAO,mBAAK;AAAA;AAAA,EAQd,QAAS,MAAM;AACb,uBAAK,OAAQ,mBAAmB,OAAO,MAAM;AAAA;AAAA,EAQ/C,UAAW;AACT,WAAO,mBAAK;AAAA;AAAA,EASd,eAAgB,UAAU,WAAW;AACnC,uBAAK,cAAe;AAAA,MAClB,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO;AAAA;AAAA;AAAA,EAStB,iBAAkB;AAChB,WAAO,mBAAK;AAAA;AAAA,EAQd,UAAW,QAAQ;AACjB,uBAAK,SAAU,OAAO;AAAA;AAAA,EAQxB,YAAa;AACX,WAAO,mBAAK;AAAA;AAAA,EAQd,yBAA0B,SAAS,aAAa;AAC9C,uBAAK,UAAW,OAAO;AAGvB,UAAM,UAAU;AAAA,MAAC;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAK;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MACzF;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MACxH;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC5G;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC9B;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MACpC;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC9B;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC5G;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC9B;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MACtD;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAClB;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC5D;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAAM;AAAA,MAC5D;AAAA,MAAM;AAAA,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",
  "names": []
}
